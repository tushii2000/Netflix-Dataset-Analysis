# -*- coding: utf-8 -*-
"""Netflix_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zx5ypfEn5RE28poreYmt134BnvNu3Biy
"""

import numpy as np
import pandas as pd
import statistics as st
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/netflix_titles_2021 - netflix_titles_2021.csv')

df.head(10)

df.shape

df.columns

df.dtypes

df.describe()

df.info()

df = df.copy()

df.isnull().sum()

df[df['duration'].isnull()]

df[df['rating'].isnull()]

df['rating'].unique()

"""Adding a Audience Category for better understanding of Rating"""

rating_to_audience_mapping = {
    'PG-13': 'Teens',
    'TV-MA': 'Mature Audience',
    'PG': 'Teens',
    'TV-14': 'Teens',
    'TV-PG': 'Parental Guidance',
    'TV-Y': 'General Audience',
    'TV-Y7': 'Teens',
    'R': 'Mature Audience',
    'TV-G': 'General Audience',
    'G': 'General Audience',
    'NC-17': 'Mature Audience',
    'unknown': 'Parental Guidance',
    'NR': 'Mature Audience',
    'TV-Y7-FV': 'Teens',
    'UR': 'Mature Guidance'
}

# Add a new column 'audience_category' based on the mapping
df['audience_category'] = df['rating'].map(rating_to_audience_mapping)

df

df.groupby('rating')['rating'].count()

df[df['date_added'].isnull()]

df['date_added'] = pd.to_datetime(df['date_added'])

df.head()

df_error = df[df['date_added'].dt.year < df['release_year']]
df.drop(df_error.index, inplace=True)

df[df.director == 'Louis C.K.'].head()

df.loc[df['director'] == 'Louis C.K.' , 'duration'] = df['rating']
df[df.director == 'Louis C.K.'].head()

df.loc[df['director'] == 'Louis C.K.' , 'rating'] = 'unknown'
df[df.director == 'Louis C.K.'].head()

new_df = df[df['type'] == 'Movie']

"""## Making New df for Movies and TV Shows separatly because we cannot calculate the duration of TV shows"""

new_df['duration'] = new_df['duration'].str.replace(' min', '').astype(int)
total_minutes = new_df['duration'].sum()
print(total_minutes)

new_df_TV = df[df['type'] == 'TV Show']

"""Replacing Seasons from duration"""

new_df_TV['duration'] = new_df_TV['duration'].str.replace(' Seasons?$', '', regex=True).astype(int)
total_minutes = new_df_TV['duration'].sum()
print(total_minutes)

sample_data = df['director'].iloc[5]
sample_data

def convert_to_list(string):
  lst = []
  lst = string.split(', ')
  return lst

l = convert_to_list(sample_data)
l

df.fillna({'rating':'unkown','cast':'unknown', 'country': 'unknown', 'director': 'unknown'}, inplace=True)
df.isna().sum()

df['cast'] = df['cast'].apply(convert_to_list)
df['director'] = df['director'].apply(convert_to_list)
df['country'] = df['country'].apply(convert_to_list)
df['listed_in'] = df['listed_in'].apply(convert_to_list)
df['rating'] = df['rating'].replace('unkown', 'unknown')
df['title'] = df['title'].str.lower()
df['description'] = df['description'].str.lower()
df

movies_count = new_df[new_df['release_year'] >= 1980]['release_year'].value_counts().sort_index()
tv_shows_count = new_df_TV[new_df_TV['release_year'] >= 1980]['release_year'].value_counts().sort_index()
# Plot the comparison between TV shows and movies count each year
plt.figure(figsize=(12, 6))
plt.plot(movies_count.index, movies_count.values, marker='o', label='Movies')
plt.plot(tv_shows_count.index, tv_shows_count.values, marker='o', label='TV Shows')
plt.title('Comparison of Movies and TV Shows Count Each Year')
plt.xlabel('Year')
plt.ylabel('Number of Content Added')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
plt.bar(movies_count.index, movies_count.values, width=0.4, label='Movies', align='center')
plt.bar(tv_shows_count.index + 0.4, tv_shows_count.values, width=0.4, label='TV Shows', align='center')
plt.title('Comparison of Movies and TV Shows Count Each Year')
plt.xlabel('Year')
plt.ylabel('Number of Content Added')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Analyze the distribution of content across different rating categories. Are certain rating categories more prevalent than others?"""

rating_distribution = new_df['rating'].value_counts()

# Plot the distribution of content across different rating categories
plt.figure(figsize=(10, 6))
rating_distribution.plot(kind='bar', color='skyblue')
plt.title('Distribution of Content Across Rating Categories')
plt.xlabel('Rating Category')
plt.ylabel('Number of Titles')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

df['show_id'].nunique()

df.info()

"""**Analyze how the popularity of different genres (listed_in) has changed over time. Are there genres that have become more or less prevalent in recent years?**"""

GenrePlot=df[df['release_year']>1980].copy()

# Explode the lists into separate rows
df_exploded = GenrePlot.explode('listed_in')

# Group the data by release year and listed_in genres
grouped = df_exploded.groupby(['release_year', 'listed_in']).size().reset_index(name='count')

# Pivot the data to have years as rows and genres as columns
pivot_table = grouped.pivot(index='release_year', columns='listed_in', values='count').fillna(0)

# Plotting the trends for each genre
plt.figure(figsize=(12, 8))
pivot_table.plot(kind='area', stacked=True)
plt.title('Popularity of Genres Over Time')
plt.xlabel('Release Year')
plt.ylabel('Number of Titles')
plt.legend(title='Genre', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""**Explore any potential relationship between content duration and its average rating.**"""

duration_ratings=new_df.copy()
duration_ratings = new_df[['duration', 'rating']]
duration_ratings = df[['duration', 'rating']]
duration_ratings = df[['duration', 'rating']]

# Convert duration to numeric format (assuming it's in the format 'X min')
duration_ratings['duration'] = duration_ratings['duration'].str.extract('(\d+)', expand=False).astype(float)

# Count occurrences of each rating and sort by value counts in ascending order
rating_counts = duration_ratings['rating'].value_counts().sort_values(ascending=True)

# Plotting the distribution of ratings
plt.figure(figsize=(10, 8))
rating_counts.plot(kind='barh', color='skyblue')
plt.title('Distribution of Ratings')
plt.xlabel('Duration')
plt.ylabel('Rating')
plt.grid(axis='x')
plt.show()

rating_counts

"""***Top 10 Cast Members with the count of appereance ***"""

# Flatten the list of lists in the 'cast' column and convert it into a list
all_cast = [cast_member for sublist in df['cast'] for cast_member in sublist]

# Count the occurrences of each cast member
cast_appearances = {}
for cast_member in all_cast:
    cast_appearances[cast_member] = cast_appearances.get(cast_member, 0) + 1
# Sort the dictionary by values in descending order
sorted_cast_appearances = sorted(cast_appearances.items(), key=lambda x: x[1], reverse=True)

# Print the top 10 cast members with the highest count of appearances
print("Top 10 Cast Members with Highest Appearances:")
for cast_member, count in sorted_cast_appearances[:10]:
    print(f"{cast_member}: {count}")

"""**Analyze whether certain cast members tend to appear more frequently in specific genres or content types.**"""

dfs = []

# Iterate over each row
for index, row in df.iterrows():
    # Iterate over each cast member
    for cast_member in row['cast']:
        # Check if the cast member is not "unknown"
        if cast_member != 'unknown':
            # Iterate over each genre
            for genre in row['listed_in']:
                # Create a DataFrame for each row and append it to the list
                dfs.append(pd.DataFrame({'cast': [cast_member], 'genre': [genre], 'type': [row['type']]}))

# Concatenate all DataFrames in the list
cast_genre_content = pd.concat(dfs, ignore_index=True)

# Group the data by cast member and genre, and count the occurrences
cast_genre_count = cast_genre_content.groupby(['cast', 'genre']).size().reset_index(name='count')

# Filter the top cast members with the highest total appearances
top_cast_members = cast_genre_count.groupby('cast')['count'].sum().nlargest(10).index

# Plot the top cast members and their appearances in different genres
plt.figure(figsize=(12, 8))
for cast_member in top_cast_members:
    data = cast_genre_count[cast_genre_count['cast'] == cast_member]
    plt.bar(data['genre'], data['count'], label=cast_member)

plt.title('Top Cast Members and Their Appearances in Different Genres')
plt.xlabel('Genre')
plt.ylabel('Number of Appearances')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.tight_layout()
plt.show()

"""**Exploring whether specific directors are associated with particular genres or content types.**"""

from itertools import product
ddfs = []

# Iterate over each row
for index, row in df.iterrows():
    # Check if the director is not 'unknown'
    if 'unknown' not in row['director']:
        # Create all possible combinations of directors and genres
        director_genre_combinations = list(product(row['director'], row['listed_in']))

        # Iterate over each combination
        for director, genre in director_genre_combinations:
            # Create a DataFrame for each combination and append it to the list
            ddfs.append(pd.DataFrame({'director': [director], 'genre': [genre], 'type': [row['type']]}))

# Concatenate all DataFrames in the list
director_genre_content = pd.concat(ddfs, ignore_index=True)

# Group the data by director and genre, and count the occurrences
director_genre_count = director_genre_content.groupby(['director', 'genre']).size().reset_index(name='count')

# Print the top directors and their associations with different genres
print("Top Directors and Their Associations with Different Genres:")
print(director_genre_count.sort_values(by='count', ascending=False).head(10))

director_genre_count_filtered = director_genre_count[director_genre_count['director'] != 'unknown']

# Get the top 10 directors
top_directors = director_genre_count_filtered.groupby('director')['count'].sum().nlargest(10).index

# Filter the DataFrame to include only the top 10 directors
director_genre_count_top10 = director_genre_count_filtered[director_genre_count_filtered['director'].isin(top_directors)]

# Pivot the DataFrame to have directors as rows, genres as columns, and count as values
director_genre_pivot = director_genre_count_top10.pivot(index='director', columns='genre', values='count')

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(director_genre_pivot, cmap='YlGnBu', linewidths=0.)
plt.title('Top 10 Directors - Genre Associations')
plt.xlabel('Genre')
plt.ylabel('Director')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

df.to_csv('cleaned_data.csv')

"""Country Wise Genre distribution"""

dffs = []

# Iterate over each row
for index, row in df.iterrows():
    # Iterate over each country in the list
    for country in row['country']:
        # Check if the country is not "unknown"
        if country != 'unknown':
            # Iterate over each genre
            for genre in row['listed_in']:
                # Create a DataFrame for each row and append it to the list
                dffs.append(pd.DataFrame({'country': [country], 'genre': [genre], 'type': [row['type']]}))

# Concatenate all DataFrames in the list
country_genre_content = pd.concat(dffs, ignore_index=True)

# Group the data by country and genre, and count the occurrences
country_genre_count = country_genre_content.groupby(['country', 'genre']).size().reset_index(name='count')

# Filter the top countries with the highest total appearances
top_countries = country_genre_count.groupby('country')['count'].sum().nlargest(10).index

# Plot the top countries and their appearances in different genres
plt.figure(figsize=(12, 8))
for country in top_countries:
    data = country_genre_count[country_genre_count['country'] == country]
    plt.bar(data['genre'], data['count'], label=country)

plt.title('Top Countries and Their Appearances in Different Genres')
plt.xlabel('Genre')
plt.ylabel('Number of Appearances')
plt.xticks(rotation=45, ha='right')
plt.legend()
plt.tight_layout()
plt.show()





"""16. Analyze the co-occurrence of different genres within the listed_in category. Are there genres that frequently appear together, suggesting potential hybrid genres or subgenres?

"""

from itertools import combinations
df_genre = df.copy()
genre = (df_genre['listed_in'].explode().unique()).tolist()
genre_list = []

genre_list_1 = combinations(genre,1)
genre_list_2 = combinations(genre,2)
genre_list_3 = combinations(genre,3)
genre_list.extend(genre_list_1)
genre_list.extend(genre_list_2)
genre_list.extend(genre_list_3)


d = {}
for i in genre_list:
  d[tuple(i)] = df_genre['listed_in'].apply(lambda x : all(j in x for j in i)).sum()

df_pair = pd.DataFrame.from_dict(d, orient='index', columns=['Count']).reset_index()
df_pair.columns = ['Genre', 'Count']
top_20 = df_pair.sort_values(by = 'Count' ,ascending = False).head(20)
top_20['Genre'] = top_20['Genre'].apply(lambda x: ', '.join(x))

# Plotting
plt.figure(figsize=(10, 8))
plt.barh(top_20['Genre'], top_20['Count'], color='darkblue')
plt.xlabel('Count')
plt.ylabel('Genre')
plt.title('Top 20 Genres by Count')
plt.gca().invert_yaxis()  # Invert y-axis to display the highest count at the top
plt.savefig('relationBetweenGenreandCount')
plt.show()

from itertools import combinations
df_genre = df.copy()
genre = (df_genre['listed_in'].explode().unique()).tolist()
genre_list = []


genre_list_2 = combinations(genre,2)
genre_list_3 = combinations(genre,3)

genre_list.extend(genre_list_2)
genre_list.extend(genre_list_3)


d = {}
for i in genre_list:
  d[tuple(i)] = df_genre['listed_in'].apply(lambda x : all(j in x for j in i)).sum()

df_pair = pd.DataFrame.from_dict(d, orient='index', columns=['Count']).reset_index()
df_pair.columns = ['Genre', 'Count']
top_20 = df_pair.sort_values(by = 'Count' ,ascending = False).head(20)
top_20['Genre'] = top_20['Genre'].apply(lambda x: ', '.join(x))

# Plotting
plt.figure(figsize=(10, 8))
plt.barh(top_20['Genre'], top_20['Count'], color='darkblue')
plt.xlabel('Count')
plt.ylabel('Genre')
plt.title('Top 20 Genres by Count')
plt.gca().invert_yaxis()  # Invert y-axis to display the highest count at the top
plt.show()



"""17. Explore how the themes or topics of content have evolved over time based on the analysis of titles and descriptions. Are there noticeable shifts in the types of stories being told?"""

df.head(20)

"""18. Compare the distribution of genres and ratings between Netflix original content and licensed content. Are there any noticeable differences in content focus or target audience?"""

df_content = df.copy()
content_mapping = {
    True : 'netflix original content',
    False : 'licensed content'
}


df_content['content_type'] = df_content.apply(lambda x: content_mapping[x['date_added'].year == x['release_year']], axis=1)

df_content.groupby('rating')['content_type'].value_counts().unstack().plot(kind = 'pie', subplots = True , legend = False, autopct='%1.1f%%',figsize=(15, 10))

df_content.groupby('audience_category')['content_type'].value_counts().unstack().plot(kind = 'pie', subplots = True , legend = False, autopct='%1.1f%%',figsize=(15, 8))

df_content.groupby('content_type').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

"""19. Analyze how the diversity of content, considering genres, countries of origin, and representation, has changed over time."""

df_diversity = df.copy()
df_diversity = df_diversity[df_diversity['release_year'] > 1980]
df_yearly_genre = df_diversity.groupby('release_year')['listed_in'].apply(lambda x: x.explode().nunique())
df_yearly_country = df_diversity.groupby('release_year')['country'].apply(lambda x: x.explode().nunique())
df_yearly_rating = df_diversity.groupby('release_year')['rating'].apply(lambda x: x.explode().nunique())


plt.figure(figsize=(10, 6))
plt.plot(df_yearly_genre.index, df_yearly_genre.values, marker='o', color='b', label='Genre Diversity')
plt.plot(df_yearly_rating.index, df_yearly_rating.values, marker='o', color='y', label='Rating Diversity')
plt.plot(df_yearly_country.index, df_yearly_country.values, marker='o', color='r', label='Country Diversity')

plt.title('Genre and Country Diversity Over Time')
plt.xlabel('Release Year')
plt.ylabel('Number of Unique Items')
plt.legend()
plt.grid(True)
plt.show()

x = []
y = []
for year, genres in df_diversity.items():
    x.append(year[1])
    y.append(genres)
plt.figure(figsize=(10, 6))
plt.scatter(y, x, marker='o', color='b')

df_diversity = df.copy()
df_diversity = df_diversity.explode('listed_in')
df_diversity = df_diversity[(df_diversity['release_year'] > 1980) & (df_diversity['release_year'] < 2020)].groupby('release_year')['listed_in'].value_counts()
pd.DataFrame(df_diversity)
x = []
y = []
genres = []

for year, count in df_diversity.items():
    x.append(year[0])
    y.append(count)
    genres.append(year[1])

plt.figure(figsize=(20, 30))
plt.scatter(x, y, marker='o', color='b', label='Count')

for x, y, genre in zip(x, y, genres):
    plt.text(x, y, genre, fontsize=8, ha='right', va='bottom', rotation=45)

plt.title('Yearly Count of Each Genre')
plt.xlabel('Release Year')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.grid(True)

plt.legend()

plt.show()

df_diversity = df.copy()
df_diversity = df_diversity.explode('country')
df_diversity = df_diversity[(df_diversity['release_year'] > 1980) & (df_diversity['release_year'] < 2020)].groupby('release_year')['country'].value_counts()
pd.DataFrame(df_diversity)
x = []
y = []
genres = []

for year, count in df_diversity.items():
    x.append(year[0])
    y.append(count)
    genres.append(year[1])

plt.figure(figsize=(20, 200))
plt.scatter(x, y, marker='o', color='b', label='Count')

for x, y, genre in zip(x, y, genres):
    plt.text(x, y, genre, fontsize=8, ha='right', va='bottom', rotation=45)

plt.title('Yearly Count of Each Genre')
plt.xlabel('Release Year')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.grid(True)

plt.legend()

plt.show()

"""20. Explore whether there is a correlation between the age of content (based on release year) and its current popularity or rating. Does older content remain relevant and well-rated over time?"""

df

from matplotlib import pyplot as plt
import seaborn as sns
figsize = (12, 1.2 * len(df['audience_category'].unique()))
plt.figure(figsize=figsize)
sns.violinplot(df, x='release_year', y='audience_category', inner='box', palette='Dark2')
sns.despine(top=True, right=True, bottom=True, left=True)

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['date_added']
  ys = series['release_year']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = df.sort_values('date_added', ascending=True)
for i, (series_name, series) in enumerate(df_sorted.groupby('type')):
  _plot_series(series, series_name, i)
  fig.legend(title='type', bbox_to_anchor=(1, 1), loc='upper left')
sns.despine(fig=fig, ax=ax)
plt.xlabel('date_added')
_ = plt.ylabel('release_year')